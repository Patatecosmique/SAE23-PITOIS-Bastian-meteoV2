// Cl√© d'API pour acc√©der au service m√©t√©o
const apiMeteoToken = "726b1c99c171e7c9d93155a0b1721f138a48d4c33ad10e533f84fbbd55d62140";

/**
 * Fonction principale pour r√©cup√©rer et afficher la m√©t√©o
 */
async function fetchWeatherData() {
    // R√©cup√®re la valeur du code postal entr√© par l'utilisateur
    const postalCode = document.getElementById("postal-code").value.trim();
    // S√©lectionne l'√©l√©ment o√π les r√©sultats seront affich√©s
    const weatherResultContainer = document.getElementById("weather-result");

    try {
        // Appel √† l'API pour r√©cup√©rer les informations g√©ographiques √† partir du code postal
        const geoApiResponse = await fetch(`https://geo.api.gouv.fr/communes?codePostal=${postalCode}&fields=nom,centre&format=json`);
        const geoData = await geoApiResponse.json();

        // V√©rifie si aucune commune n'a √©t√© trouv√©e pour le code postal donn√©
        if (!geoData.length) {
            weatherResultContainer.innerHTML = "<p>Aucune commune trouv√©e pour ce code postal.</p>";
            return;
        }

        // R√©cup√®re le nom et les coordonn√©es de la premi√®re commune trouv√©e a partir de la r√©ponse de l'API 
        const { nom: cityName, centre: cityCoordinates } = geoData[0];
        const [longitude, latitude] = cityCoordinates.coordinates;

        // Appel √† l'API m√©t√©o pour r√©cup√©rer les pr√©visions √† partir des coordonn√©es
        const weatherApiResponse = await fetch(`https://api.meteo-concept.com/api/forecast/daily?token=${apiMeteoToken}&latlng=${latitude},${longitude}`);
        const weatherData = await weatherApiResponse.json();
        const todayWeather = weatherData.forecast[0]; // Donn√©es m√©t√©o pour aujourd'hui

        // Extraction des donn√©es m√©t√©o importantes
        const minTemperature = todayWeather.tmin; // Temp√©rature minimale
        const maxTemperature = todayWeather.tmax; // Temp√©rature maximale
        const averageTemperature = ((minTemperature + maxTemperature) / 2); // Moyenne des temp√©ratures
        const rainProbability = todayWeather.probarain ?? "N/A"; // Probabilit√© de pluie
        const sunHours = todayWeather.sun_hours ?? "N/A"; // Heures d'ensoleillement

        // Affiche les r√©sultats m√©t√©o dans le conteneur
        weatherResultContainer.innerHTML = `
  <h2>M√©t√©o pour ${cityName}</h2>
  <ul>
    <li><strong>üå°Ô∏è Temp√©rature minimale :</strong> ${minTemperature}¬∞C</li>
    <li><strong>üå°Ô∏è Temp√©rature maximale :</strong> ${maxTemperature}¬∞C</li>
    <li><strong>üå°Ô∏è Moyenne estim√©e :</strong> ${averageTemperature}¬∞C</li>
    <li><strong>‚òî Probabilit√© de pluie :</strong> ${rainProbability}%</li>
    <li><strong>‚òÄÔ∏è Heures d'ensoleillement :</strong> ${sunHours} h</li>
  </ul>
`;
    } catch (error) {
        // En cas d'erreur, affiche un message d'erreur et log l'erreur dans la console
        console.error(error);
        weatherResultContainer.innerHTML = "<p>Erreur lors de la r√©cup√©ration des donn√©es m√©t√©o.</p>";
    }
}

// Met √† jour l'√©tiquette du nombre de jours en fonction de la valeur du curseur
function updateDaysLabel(value) {
    document.getElementById('days-label').textContent = `${value} jour${value > 1 ? 's' : ''}`;
}


